// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using alquimia.Data.Data.Entities;

#nullable disable

namespace backendAlquimia.Migrations
{
    [DbContext(typeof(AlquimiaDbContext))]
    [Migration("20250526062128_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK_UserRoles");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("IncompatibleNote", b =>
                {
                    b.Property<int>("NotaId")
                        .HasColumnType("int");

                    b.Property<int>("NotaIncompatibleId")
                        .HasColumnType("int");

                    b.HasKey("NotaId", "NotaIncompatibleId")
                        .HasName("PK__Incompat__06842A27C29444C3");

                    b.HasIndex("NotaIncompatibleId");

                    b.ToTable("IncompatibleNotes", (string)null);
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.AspNetUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Design", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdProducto")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LabelColor")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Shape")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TextColor")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("TipoProductoId")
                        .HasColumnType("int");

                    b.Property<string>("Typography")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Volume")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.HasIndex("TipoProductoId");

                    b.ToTable("Design");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.FamilyCompatibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Familia1Id")
                        .HasColumnType("int");

                    b.Property<int>("Familia2Id")
                        .HasColumnType("int");

                    b.Property<int>("FamiliaMayor")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(case when [Familia1Id]<[Familia2Id] then [Familia2Id] else [Familia1Id] end)", true);

                    b.Property<int>("FamiliaMenor")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(case when [Familia1Id]<[Familia2Id] then [Familia1Id] else [Familia2Id] end)", true);

                    b.Property<int>("GradoDeCompatibilidad")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Familia1Id" }, "IX_CompatibilidadesFamilias_Familia1Id");

                    b.HasIndex(new[] { "Familia2Id" }, "IX_CompatibilidadesFamilias_Familia2Id");

                    b.HasIndex(new[] { "FamiliaMenor", "FamiliaMayor" }, "IX_Unique_Compatibilities")
                        .IsUnique();

                    b.ToTable("FamilyCompatibilities");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.FinalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DesignId")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<int?>("ProductosId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesignId");

                    b.HasIndex("IdUsuario");

                    b.HasIndex("ProductosId");

                    b.ToTable("FinalEntity");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Formula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("ConcentracionAgua")
                        .HasColumnType("float");

                    b.Property<double>("ConcentracionAlcohol")
                        .HasColumnType("float");

                    b.Property<double>("ConcentracionEsencia")
                        .HasColumnType("float");

                    b.Property<int?>("CreadorId")
                        .HasColumnType("int");

                    b.Property<int>("FormulaCorazon")
                        .HasColumnType("int");

                    b.Property<int>("FormulaFondo")
                        .HasColumnType("int");

                    b.Property<int>("FormulaSalida")
                        .HasColumnType("int");

                    b.Property<int>("IntensidadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreadorId");

                    b.HasIndex("FormulaCorazon");

                    b.HasIndex("FormulaFondo");

                    b.HasIndex("FormulaSalida");

                    b.HasIndex(new[] { "IntensidadId" }, "IX_Formulas_IntensidadId");

                    b.ToTable("Formulas");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.FormulaNote", b =>
                {
                    b.Property<int>("FormulaNotaId")
                        .HasColumnType("int");

                    b.Property<int>("NotaId1")
                        .HasColumnType("int");

                    b.Property<int?>("NotaId2")
                        .HasColumnType("int");

                    b.Property<int?>("NotaId3")
                        .HasColumnType("int");

                    b.Property<int?>("NotaId4")
                        .HasColumnType("int");

                    b.Property<int?>("PiramideOlfativaId")
                        .HasColumnType("int");

                    b.HasKey("FormulaNotaId");

                    b.HasIndex("NotaId1");

                    b.HasIndex("NotaId2");

                    b.HasIndex("NotaId3");

                    b.HasIndex("NotaId4");

                    b.HasIndex("PiramideOlfativaId");

                    b.ToTable("FormulaNote");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Intensity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.ToTable("Intensities");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FamiliaOlfativaId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PiramideOlfativaId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Notas");

                    b.HasIndex(new[] { "FamiliaOlfativaId" }, "IX_Notas_FamiliaOlfativaId");

                    b.HasIndex(new[] { "PiramideOlfativaId" }, "IX_Notas_PiramideOlfativaId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.NotesPyramidFamily", b =>
                {
                    b.Property<string>("Familia")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Nota")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NotaId")
                        .HasColumnType("int")
                        .HasColumnName("Nota_Id");

                    b.Property<string>("SectorPiramide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Sector_Piramide");

                    b.ToTable((string)null);

                    b.ToView("NotesPyramidFamily", (string)null);
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.OlfactoryFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("OlfactoryFamilies");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.OlfactoryPyramid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("Duracion")
                        .HasColumnType("time");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OlfactoryPyramid");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Option1")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Option2")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Option3")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Option4")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EstadoId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.OrderProduct", b =>
                {
                    b.Property<int>("PedidoProductoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PedidoProductoId"));

                    b.Property<int?>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int?>("ProductosId")
                        .HasColumnType("int");

                    b.HasKey("PedidoProductoId");

                    b.HasIndex("IdPedido");

                    b.HasIndex(new[] { "ProductosId" }, "IX_PedidoProducto_ProductosId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("TipoProductoId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "IdProveedor" }, "IX_Productos_IdProveedor");

                    b.HasIndex(new[] { "TipoProductoId" }, "IX_Productos_TipoProductoId");

                    b.HasIndex(new[] { "UsuarioId" }, "IX_Productos_UsuarioId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdOpciones")
                        .HasColumnType("int");

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdOpciones");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdPregunta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPregunta");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdEstado")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("EsProveedor")
                        .HasColumnType("bit");

                    b.Property<int?>("IdEstado")
                        .HasColumnType("int");

                    b.Property<int?>("IdFormulas")
                        .HasColumnType("int");

                    b.Property<int?>("IdQuiz")
                        .HasColumnType("int");

                    b.Property<int?>("IdSuscripcion")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IdEstado");

                    b.HasIndex("IdFormulas");

                    b.HasIndex("IdQuiz");

                    b.HasIndex("IdSuscripcion");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.UserProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UserProducts");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.UserProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProducto");

                    b.HasIndex("IdUsuario");

                    b.ToTable("UserProductReviews");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.UserProviderReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPublicacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProveedor");

                    b.HasIndex("IdUsuario");

                    b.ToTable("UserProviderReviews");
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_RoleId");

                    b.HasOne("alquimia.Data.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_Usuarios_UserId");
                });

            modelBuilder.Entity("IncompatibleNote", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Note", null)
                        .WithMany()
                        .HasForeignKey("NotaId")
                        .IsRequired()
                        .HasConstraintName("FK_NotaIncompatible_nota");

                    b.HasOne("alquimia.Data.Data.Entities.Note", null)
                        .WithMany()
                        .HasForeignKey("NotaIncompatibleId")
                        .IsRequired()
                        .HasConstraintName("FK_NotaIncompatible_notaIncompatible");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.AspNetRoleClaim", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Role", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetRoleClaims_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.AspNetUserClaim", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.User", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserClaims_Usuarios_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.AspNetUserLogin", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.User", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_Usuarios_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.AspNetUserToken", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.User", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserTokens_Usuarios_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Design", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Product", "IdProductoNavigation")
                        .WithMany("Designs")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_design_productId");

                    b.HasOne("alquimia.Data.Data.Entities.ProductType", "TipoProducto")
                        .WithMany("Designs")
                        .HasForeignKey("TipoProductoId")
                        .HasConstraintName("FK_design_ProductTypes");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("TipoProducto");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.FamilyCompatibility", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.OlfactoryFamily", "Familia1")
                        .WithMany("FamilyCompatibilityFamilia1s")
                        .HasForeignKey("Familia1Id")
                        .IsRequired()
                        .HasConstraintName("FK_CompatibilidadesFamilias_FamiliasOlfativas_Familia1Id");

                    b.HasOne("alquimia.Data.Data.Entities.OlfactoryFamily", "Familia2")
                        .WithMany("FamilyCompatibilityFamilia2s")
                        .HasForeignKey("Familia2Id")
                        .IsRequired()
                        .HasConstraintName("FK_CompatibilidadesFamilias_FamiliasOlfativas_Familia2Id");

                    b.Navigation("Familia1");

                    b.Navigation("Familia2");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.FinalEntity", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Design", "Design")
                        .WithMany("FinalEntities")
                        .HasForeignKey("DesignId")
                        .HasConstraintName("FK_EntidadFinal_Design");

                    b.HasOne("alquimia.Data.Data.Entities.User", "IdUsuarioNavigation")
                        .WithMany("FinalEntities")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK_EntidadFinal_IdUsuario");

                    b.HasOne("alquimia.Data.Data.Entities.Product", "Productos")
                        .WithMany("FinalEntities")
                        .HasForeignKey("ProductosId")
                        .HasConstraintName("FK_EntidadFinal_ProductoId");

                    b.Navigation("Design");

                    b.Navigation("IdUsuarioNavigation");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Formula", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.User", "Creador")
                        .WithMany("Formulas")
                        .HasForeignKey("CreadorId")
                        .HasConstraintName("FK_Formulas_Usuarios_CreadorId");

                    b.HasOne("alquimia.Data.Data.Entities.FormulaNote", "FormulaCorazonNavigation")
                        .WithMany("FormulaFormulaCorazonNavigations")
                        .HasForeignKey("FormulaCorazon")
                        .IsRequired()
                        .HasConstraintName("FK_Formulas_corazon");

                    b.HasOne("alquimia.Data.Data.Entities.FormulaNote", "FormulaFondoNavigation")
                        .WithMany("FormulaFormulaFondoNavigations")
                        .HasForeignKey("FormulaFondo")
                        .IsRequired()
                        .HasConstraintName("FK_Formulas_fondo");

                    b.HasOne("alquimia.Data.Data.Entities.FormulaNote", "FormulaSalidaNavigation")
                        .WithMany("FormulaFormulaSalidaNavigations")
                        .HasForeignKey("FormulaSalida")
                        .IsRequired()
                        .HasConstraintName("FK_Formulas_salida");

                    b.HasOne("alquimia.Data.Data.Entities.Intensity", "Intensidad")
                        .WithMany("Formulas")
                        .HasForeignKey("IntensidadId")
                        .IsRequired()
                        .HasConstraintName("FK_Formulas_intensidad");

                    b.Navigation("Creador");

                    b.Navigation("FormulaCorazonNavigation");

                    b.Navigation("FormulaFondoNavigation");

                    b.Navigation("FormulaSalidaNavigation");

                    b.Navigation("Intensidad");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.FormulaNote", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Note", "NotaId1Navigation")
                        .WithMany("FormulaNoteNotaId1Navigations")
                        .HasForeignKey("NotaId1")
                        .IsRequired()
                        .HasConstraintName("FK_nota1");

                    b.HasOne("alquimia.Data.Data.Entities.Note", "NotaId2Navigation")
                        .WithMany("FormulaNoteNotaId2Navigations")
                        .HasForeignKey("NotaId2")
                        .HasConstraintName("FK_nota2");

                    b.HasOne("alquimia.Data.Data.Entities.Note", "NotaId3Navigation")
                        .WithMany("FormulaNoteNotaId3Navigations")
                        .HasForeignKey("NotaId3")
                        .HasConstraintName("FK_nota3");

                    b.HasOne("alquimia.Data.Data.Entities.Note", "NotaId4Navigation")
                        .WithMany("FormulaNoteNotaId4Navigations")
                        .HasForeignKey("NotaId4")
                        .HasConstraintName("FK_nota4");

                    b.HasOne("alquimia.Data.Data.Entities.OlfactoryPyramid", "PiramideOlfativa")
                        .WithMany("FormulaNotes")
                        .HasForeignKey("PiramideOlfativaId")
                        .HasConstraintName("FK_piramideOlfativa");

                    b.Navigation("NotaId1Navigation");

                    b.Navigation("NotaId2Navigation");

                    b.Navigation("NotaId3Navigation");

                    b.Navigation("NotaId4Navigation");

                    b.Navigation("PiramideOlfativa");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Note", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.OlfactoryFamily", "FamiliaOlfativa")
                        .WithMany("Notes")
                        .HasForeignKey("FamiliaOlfativaId")
                        .IsRequired()
                        .HasConstraintName("FK_notasFamiliaOlfativa");

                    b.HasOne("alquimia.Data.Data.Entities.OlfactoryPyramid", "PiramideOlfativa")
                        .WithMany("Notes")
                        .HasForeignKey("PiramideOlfativaId")
                        .IsRequired()
                        .HasConstraintName("FK_notasPiramideOlfativa");

                    b.Navigation("FamiliaOlfativa");

                    b.Navigation("PiramideOlfativa");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Order", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Status", "Estado")
                        .WithMany("Orders")
                        .HasForeignKey("EstadoId")
                        .HasConstraintName("FK_pedidosEstado");

                    b.HasOne("alquimia.Data.Data.Entities.User", "Usuario")
                        .WithMany("Orders")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("fk_pedido_usuario");

                    b.Navigation("Estado");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.OrderProduct", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Order", "IdPedidoNavigation")
                        .WithMany("OrderProducts")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("FK_pedidoIdPedido");

                    b.HasOne("alquimia.Data.Data.Entities.Product", "Productos")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductosId")
                        .HasConstraintName("FK_pedidoProductoId");

                    b.Navigation("IdPedidoNavigation");

                    b.Navigation("Productos");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Product", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.User", "IdProveedorNavigation")
                        .WithMany("ProductIdProveedorNavigations")
                        .HasForeignKey("IdProveedor")
                        .HasConstraintName("FK_productIdProv");

                    b.HasOne("alquimia.Data.Data.Entities.ProductType", "TipoProducto")
                        .WithMany("Products")
                        .HasForeignKey("TipoProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductTypes");

                    b.HasOne("alquimia.Data.Data.Entities.User", "Usuario")
                        .WithMany("ProductUsuarios")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK_productIdUser");

                    b.Navigation("IdProveedorNavigation");

                    b.Navigation("TipoProducto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Question", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Option", "IdOpcionesNavigation")
                        .WithMany("Questions")
                        .HasForeignKey("IdOpciones")
                        .HasConstraintName("FK_QuestionsOptions");

                    b.Navigation("IdOpcionesNavigation");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Quiz", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Question", "IdPreguntaNavigation")
                        .WithMany("Quizzes")
                        .HasForeignKey("IdPregunta")
                        .HasConstraintName("FK_quizPreguntas");

                    b.Navigation("IdPreguntaNavigation");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Subscription", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Status", "IdEstadoNavigation")
                        .WithMany("Subscriptions")
                        .HasForeignKey("IdEstado")
                        .HasConstraintName("FK_Status_Subscription");

                    b.Navigation("IdEstadoNavigation");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.User", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Status", "IdEstadoNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdEstado")
                        .HasConstraintName("FK_estado_Users");

                    b.HasOne("alquimia.Data.Data.Entities.Formula", "IdFormulasNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdFormulas")
                        .HasConstraintName("FK_formulas_Users");

                    b.HasOne("alquimia.Data.Data.Entities.Quiz", "IdQuizNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdQuiz")
                        .HasConstraintName("FK_quiz_Users");

                    b.HasOne("alquimia.Data.Data.Entities.Subscription", "IdSuscripcionNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdSuscripcion")
                        .HasConstraintName("FK_suscripcion_Users");

                    b.Navigation("IdEstadoNavigation");

                    b.Navigation("IdFormulasNavigation");

                    b.Navigation("IdQuizNavigation");

                    b.Navigation("IdSuscripcionNavigation");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.UserProduct", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Product", "Producto")
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductoId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProducts_producto");

                    b.HasOne("alquimia.Data.Data.Entities.User", "Usuario")
                        .WithMany("UserProducts")
                        .HasForeignKey("UsuarioId")
                        .IsRequired()
                        .HasConstraintName("FK_UserProducts_usuario");

                    b.Navigation("Producto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.UserProductReview", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.Product", "IdProductoNavigation")
                        .WithMany("UserProductReviews")
                        .HasForeignKey("IdProducto")
                        .HasConstraintName("FK_opinion_ProductoId");

                    b.HasOne("alquimia.Data.Data.Entities.User", "IdUsuarioNavigation")
                        .WithMany("UserProductReviews")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_opinionUsuario_producto");

                    b.Navigation("IdProductoNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.UserProviderReview", b =>
                {
                    b.HasOne("alquimia.Data.Data.Entities.User", "IdProveedorNavigation")
                        .WithMany("UserProviderReviewIdProveedorNavigations")
                        .HasForeignKey("IdProveedor")
                        .IsRequired()
                        .HasConstraintName("FK_opinionProveedor");

                    b.HasOne("alquimia.Data.Data.Entities.User", "IdUsuarioNavigation")
                        .WithMany("UserProviderReviewIdUsuarioNavigations")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("FK_opinionUsuario");

                    b.Navigation("IdProveedorNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Design", b =>
                {
                    b.Navigation("FinalEntities");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Formula", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.FormulaNote", b =>
                {
                    b.Navigation("FormulaFormulaCorazonNavigations");

                    b.Navigation("FormulaFormulaFondoNavigations");

                    b.Navigation("FormulaFormulaSalidaNavigations");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Intensity", b =>
                {
                    b.Navigation("Formulas");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Note", b =>
                {
                    b.Navigation("FormulaNoteNotaId1Navigations");

                    b.Navigation("FormulaNoteNotaId2Navigations");

                    b.Navigation("FormulaNoteNotaId3Navigations");

                    b.Navigation("FormulaNoteNotaId4Navigations");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.OlfactoryFamily", b =>
                {
                    b.Navigation("FamilyCompatibilityFamilia1s");

                    b.Navigation("FamilyCompatibilityFamilia2s");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.OlfactoryPyramid", b =>
                {
                    b.Navigation("FormulaNotes");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Option", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Product", b =>
                {
                    b.Navigation("Designs");

                    b.Navigation("FinalEntities");

                    b.Navigation("OrderProducts");

                    b.Navigation("UserProductReviews");

                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.ProductType", b =>
                {
                    b.Navigation("Designs");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Question", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Quiz", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Role", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Status", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Subscriptions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.Subscription", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("alquimia.Data.Data.Entities.User", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("FinalEntities");

                    b.Navigation("Formulas");

                    b.Navigation("Orders");

                    b.Navigation("ProductIdProveedorNavigations");

                    b.Navigation("ProductUsuarios");

                    b.Navigation("UserProductReviews");

                    b.Navigation("UserProducts");

                    b.Navigation("UserProviderReviewIdProveedorNavigations");

                    b.Navigation("UserProviderReviewIdUsuarioNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
